package com.jqwong.music.dal.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jqwong.music.entity.FavoriteArtist;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE_ARTIST".
*/
public class FavoriteArtistDao extends AbstractDao<FavoriteArtist, Long> {

    public static final String TABLENAME = "FAVORITE_ARTIST";

    /**
     * Properties of entity FavoriteArtist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Pic70 = new Property(2, String.class, "Pic70", false, "PIC70");
        public final static Property AId = new Property(3, Long.class, "AId", false, "AID");
    }


    public FavoriteArtistDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteArtistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE_ARTIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"NAME\" TEXT," + // 1: Name
                "\"PIC70\" TEXT," + // 2: Pic70
                "\"AID\" INTEGER);"); // 3: AId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE_ARTIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavoriteArtist entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Pic70 = entity.getPic70();
        if (Pic70 != null) {
            stmt.bindString(3, Pic70);
        }
 
        Long AId = entity.getAId();
        if (AId != null) {
            stmt.bindLong(4, AId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavoriteArtist entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Pic70 = entity.getPic70();
        if (Pic70 != null) {
            stmt.bindString(3, Pic70);
        }
 
        Long AId = entity.getAId();
        if (AId != null) {
            stmt.bindLong(4, AId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FavoriteArtist readEntity(Cursor cursor, int offset) {
        FavoriteArtist entity = new FavoriteArtist( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Pic70
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // AId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavoriteArtist entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPic70(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FavoriteArtist entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FavoriteArtist entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FavoriteArtist entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
