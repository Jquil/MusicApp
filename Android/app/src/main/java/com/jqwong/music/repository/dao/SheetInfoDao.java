package com.jqwong.music.repository.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jqwong.music.repository.entity.SheetInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHEET_INFO".
*/
public class SheetInfoDao extends AbstractDao<SheetInfo, Long> {

    public static final String TABLENAME = "SHEET_INFO";

    /**
     * Properties of entity SheetInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "UserId", false, "USER_ID");
        public final static Property Rid = new Property(2, Long.class, "Rid", false, "RID");
        public final static Property SheetToken = new Property(3, String.class, "SheetToken", false, "SHEET_TOKEN");
        public final static Property Delete = new Property(4, Boolean.class, "Delete", false, "DELETE");
    }


    public SheetInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SheetInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHEET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"USER_ID\" INTEGER," + // 1: UserId
                "\"RID\" INTEGER," + // 2: Rid
                "\"SHEET_TOKEN\" TEXT," + // 3: SheetToken
                "\"DELETE\" INTEGER);"); // 4: Delete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHEET_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SheetInfo entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(2, UserId);
        }
 
        Long Rid = entity.getRid();
        if (Rid != null) {
            stmt.bindLong(3, Rid);
        }
 
        String SheetToken = entity.getSheetToken();
        if (SheetToken != null) {
            stmt.bindString(4, SheetToken);
        }
 
        Boolean Delete = entity.getDelete();
        if (Delete != null) {
            stmt.bindLong(5, Delete ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SheetInfo entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(2, UserId);
        }
 
        Long Rid = entity.getRid();
        if (Rid != null) {
            stmt.bindLong(3, Rid);
        }
 
        String SheetToken = entity.getSheetToken();
        if (SheetToken != null) {
            stmt.bindString(4, SheetToken);
        }
 
        Boolean Delete = entity.getDelete();
        if (Delete != null) {
            stmt.bindLong(5, Delete ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SheetInfo readEntity(Cursor cursor, int offset) {
        SheetInfo entity = new SheetInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // Rid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SheetToken
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // Delete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SheetInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSheetToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDelete(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SheetInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SheetInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SheetInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
