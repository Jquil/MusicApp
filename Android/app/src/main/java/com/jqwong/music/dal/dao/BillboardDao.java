package com.jqwong.music.dal.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jqwong.music.entity.Billboard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILLBOARD".
*/
public class BillboardDao extends AbstractDao<Billboard, Long> {

    public static final String TABLENAME = "BILLBOARD";

    /**
     * Properties of entity Billboard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property SourceId = new Property(2, String.class, "SourceId", false, "SOURCE_ID");
        public final static Property BId = new Property(3, String.class, "BId", false, "BID");
        public final static Property Parent = new Property(4, String.class, "Parent", false, "PARENT");
        public final static Property Time = new Property(5, String.class, "Time", false, "TIME");
    }


    public BillboardDao(DaoConfig config) {
        super(config);
    }
    
    public BillboardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILLBOARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"NAME\" TEXT," + // 1: Name
                "\"SOURCE_ID\" TEXT," + // 2: SourceId
                "\"BID\" TEXT," + // 3: BId
                "\"PARENT\" TEXT," + // 4: Parent
                "\"TIME\" TEXT);"); // 5: Time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILLBOARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Billboard entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String SourceId = entity.getSourceId();
        if (SourceId != null) {
            stmt.bindString(3, SourceId);
        }
 
        String BId = entity.getBId();
        if (BId != null) {
            stmt.bindString(4, BId);
        }
 
        String Parent = entity.getParent();
        if (Parent != null) {
            stmt.bindString(5, Parent);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(6, Time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Billboard entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String SourceId = entity.getSourceId();
        if (SourceId != null) {
            stmt.bindString(3, SourceId);
        }
 
        String BId = entity.getBId();
        if (BId != null) {
            stmt.bindString(4, BId);
        }
 
        String Parent = entity.getParent();
        if (Parent != null) {
            stmt.bindString(5, Parent);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(6, Time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Billboard readEntity(Cursor cursor, int offset) {
        Billboard entity = new Billboard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SourceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Parent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Billboard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSourceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Billboard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Billboard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Billboard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
